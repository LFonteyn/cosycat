(reset)
(run)
(reset)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(reset)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(reset)
(figwheel-sidecar.repl-api/reset-autobuild)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(def args [+ 1])
(apply update-in {"a" 1} ["a"] args)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(assoc-in {} [:a :b] "a" [:b] "b)
)
}
)
(assoc-in {} [:a :b] "a" [:b] "b")
(assoc {} [:a :b] "a" [:b] "b")
(-> {} (assoc-in [:a :b] "a" [:b] "b"))
(-> {} (assoc-in [:a :b] "a") (assoc-in [:b] "b"))
(merge (-> {} (assoc-in [:a :b] "a") (assoc-in [:b] "b")) nil)
 {:hit ({:punct " ", :facs "-", :pos "?", :lemma "ballot", :id "3055", :xmlid "w.wx.3445", :word "ballot"} {:punct " , ", :facs "-", :pos "?", :lemma "when", :id "3056", :xmlid "w.wx.3447", :word "when"} {:punct " ", :facs "-", :pos "?", :lemma "texas", :id "3057", :xmlid "w.wx.3448", :word "Texas"} {:punct " ", :facs "-", :pos "?", :lemma "vote", :id "3058", :xmlid "w.wx.3449", :word "votes"} {:punct " ", :facs "-", :pos "?", :lemma "on", :id "3059", :xmlid "w.wx.3450", :word "on"} {:punct " ", :facs "-", :pos "?", :lemma "a", :id "3060", :xmlid "w.wx.3451", :word "a", :match true} {:punct " ", :facs "-", :pos "?", :lemma "u.s.", :id "3061", :xmlid "w.wx.3452", :word "U.S."} {:punct " ", :facs "-", :pos "?", :lemma "senator", :id "3062", :xmlid "w.wx.3453", :word "senator"} {:punct " . ", :facs "-", :pos "?", :lemma "rep.", :id "3063", :xmlid "w.wx.3455", :word "Rep."} {:punct " ", :facs "-", :pos "?", :lemma "wesley", :id "3064", :xmlid "w.wx.3456", :word "Wesley"} {:punct " ", :facs "-", :pos "?", :lemma "robert", :id "3065", :xmlid "w.wx.3457", :word "Roberts"})
}
 {:hit '({:punct " ", :facs "-", :pos "?", :lemma "ballot", :id "3055", :xmlid "w.wx.3445", :word "ballot"} {:punct " , ", :facs "-", :pos "?", :lemma "when", :id "3056", :xmlid "w.wx.3447", :word "when"} {:punct " ", :facs "-", :pos "?", :lemma "texas", :id "3057", :xmlid "w.wx.3448", :word "Texas"} {:punct " ", :facs "-", :pos "?", :lemma "vote", :id "3058", :xmlid "w.wx.3449", :word "votes"} {:punct " ", :facs "-", :pos "?", :lemma "on", :id "3059", :xmlid "w.wx.3450", :word "on"} {:punct " ", :facs "-", :pos "?", :lemma "a", :id "3060", :xmlid "w.wx.3451", :word "a", :match true} {:punct " ", :facs "-", :pos "?", :lemma "u.s.", :id "3061", :xmlid "w.wx.3452", :word "U.S."} {:punct " ", :facs "-", :pos "?", :lemma "senator", :id "3062", :xmlid "w.wx.3453", :word "senator"} {:punct " . ", :facs "-", :pos "?", :lemma "rep.", :id "3063", :xmlid "w.wx.3455", :word "Rep."} {:punct " ", :facs "-", :pos "?", :lemma "wesley", :id "3064", :xmlid "w.wx.3456", :word "Wesley"} {:punct " ", :facs "-", :pos "?", :lemma "robert", :id "3065", :xmlid "w.wx.3457", :word "Roberts"})}
(def x {:hit '({:punct " ", :facs "-", :pos "?", :lemma "ballot", :id "3055", :xmlid "w.wx.3445", :word "ballot"} {:punct " , ", :facs "-", :pos "?", :lemma "when", :id "3056", :xmlid "w.wx.3447", :word "when"} {:punct " ", :facs "-", :pos "?", :lemma "texas", :id "3057", :xmlid "w.wx.3448", :word "Texas"} {:punct " ", :facs "-", :pos "?", :lemma "vote", :id "3058", :xmlid "w.wx.3449", :word "votes"} {:punct " ", :facs "-", :pos "?", :lemma "on", :id "3059", :xmlid "w.wx.3450", :word "on"} {:punct " ", :facs "-", :pos "?", :lemma "a", :id "3060", :xmlid "w.wx.3451", :word "a", :match true} {:punct " ", :facs "-", :pos "?", :lemma "u.s.", :id "3061", :xmlid "w.wx.3452", :word "U.S."} {:punct " ", :facs "-", :pos "?", :lemma "senator", :id "3062", :xmlid "w.wx.3453", :word "senator"} {:punct " . ", :facs "-", :pos "?", :lemma "rep.", :id "3063", :xmlid "w.wx.3455", :word "Rep."} {:punct " ", :facs "-", :pos "?", :lemma "wesley", :id "3064", :xmlid "w.wx.3456", :word "Wesley"} {:punct " ", :facs "-", :pos "?", :lemma "robert", :id "3065", :xmlid "w.wx.3457", :word "Roberts"})})
x
(:hit x)
(some #(= "3055" (:id %)) (:hit x))
(some #(= "3055s" (:id %)) (:hit x))
(figwheel-sidecar.repl-api/reset-autobuild)
(boolean 0)
(figwheel-sidecar.repl-api/reset-autobuild)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
C
(run)
(into {} (interleave (range 10) (range 10 20)))
(interleave (range 10) (range 10 20))
(apply hash-map (interleave (range 10) (range 10 20)))
(into {} (apply hash-map (interleave (range 10) (range 10 20))) {0 100})
(hash-map 1 2 12 1)
(hash-map [1 2 12 1])
(apply hash-map [1 2 12 1])
(hash-map [1 2 12 1])
(merge {} [1 2 12 1])
(merge {} [[1 2] [12 1]])
(figwheel-sidecar.repl-api/reset-autobuild)
(interleave (for [i (range 2)] [:i (for [j (range 2 4)] [j])]) (for [i (range 4 6)] [i (for [j (range 6 8)] [j])]))
(interleave (for [i (range 2)] [:i (for [j (range 2 4)] [j])]) (for [i (range 4 6)] [:j (for [j (range 6 8)] [j])]))
(into [:td] [:input] [:num])
(into [:td] 1 2 3)
(into [:td] [:s])
(run)
(alembic.still/distill '[prismatic/schema "1.0.5"])
(alembic.still/distill '[binaryage/devtools "0.5.2"])
(figwheel-sidecar.repl-api/reset-autobuild)
(run)
(concat (for [i (range 10)] [i]]) [1])
(concat (for [i (range 10)] [i]) [1])
(into (for [i (range 10)] [i]) [1])
(conj (for [i (range 10)] [i]) [1])
(cons (for [i (range 10)] [i]) [1])
(cons (for [i (range 10)] [i]) 1)
(conj (for [i (range 10)] [i]) [1])
(count {1 1})
(count {})
(frequencies "asdasdasdasdgagadfhadh")
(for [[a b] (frequencies "asdasdasdasdgagadfhadh")] [b a])
(figwheel-sidecar.repl-api/reset-autobuild)
(def x "asd")
(alert "hey!")
(js/alert "hey!")
(figwheel-sidecar.repl-api/api-help)
(figwheel-sidecar.repl-api/cljs-repl)
(alert "hey")
(js/alert "hey")
(println "a"0
)
(println "a")
(cljs.user)
(println cljs.user)
(println cljs.env)
(require-macros
)
cleebo.env
cleebo.env/cljs-env
(cleebo.env/cljs-env :corpora)
(cleebo.env/cljs-env :cqp)
js/document.referrer
js/document.userAgent
js/navigator.userAgent
(ajax.core/ajax-request {:method :head})
(ajax.core/ajax-request {:uri "/" :method :head})
(ajax.core/ajax-request {:uri "/" :method :head :response-format :json})
(ajax.core/ajax-request {:uri "/" :method :head :response-format [:json]})
(ajax.core/ajax-request {:uri "/" :method :head :response-format :transit})
(ajax.core/ajax-request {:uri "/blacklab" :method :head :response-format :transit})
(ajax.core/ajax-request {:uri "/blacklab" :method :head)
(ajax.core/ajax-request {:uri "/blacklab" :method :head})
(ajax.core/ajax-request {:uri "/blacklab" :method :head :handler #(.log js/console %})
(ajax.core/ajax-request {:uri "/blacklab" :method :head :handler #(.log js/console %)})
(ajax.core/GET {:uri "/blacklab" :handler #(.log js/console %)})
(ajax.core/HEAD {:uri "/blacklab" :handler #(.log js/console %)})
(ajax.core/HEAD {:uri "/" :handler #(.log js/console %)})
exit
(run)
(figwheel-sidecar.repl-api/cljs-repl)
(ajax.core/HEAD {:uri "/ping" :handler #(.log js/console %)})
(ajax.core/HEAD "/ping" {:handler #(.log js/console %)})
(ajax.core/HEAD "/ping" {:handler #(println %)})
(ajax.core/HEAD "/ping" {:handler #(println (:session %))})
(ajax.core/HEAD "/ping" {:handler #(.log js/console (:session %))})
(ajax.core/HEAD "/ping" {:handler #(.log js/console %)})
(ajax.core/HEAD "/ping" {:handler #(.getAllResponseHeaders %)})
(ajax.core/HEAD "/ping" {:handler #(println (.getAllResponseHeaders %))})
(ajax.core/HEAD "/ping" {:handler #(println (class %))})
(ajax.core/HEAD "/ping" {:handler #(keys %)})
(figwheel-sidecar.repl-api/reset-autobuild)
(figwheel-sidecar.components.cljs-autobuild)
(use 'figwheel-sidecar.repl-api)
:cljs/quit
(figwheel-sidecar.repl-api/reset-autobuild)
(use 'figwheel-sidecar.repl-api)
(figwheel-sidecar.repl-api/cljs-repl)
js/username
cljs/:quit
:cljs/quit
exit
(run)
(def hits [[{:a "a" :b "b"} {:a "a" :c "c"}] [{:a "a" :b "b"} {:a "a" :c "c"}] [{:a "a" :b "b"} {:a "a" :c "c"}]])
hits
(def hit [{:a "a" :b "b"} {:c "c"} {:a "a" :b "b"} {:d "d"}])
(-> hit #(filter :a %) #(map :a %))
(-> hit #(filter :a %) #(assoc % :b "asd"))
(-> hit #(filter :a %))
hit
(-> hit #(filter :a %))
((-> hit #(filter :a %)))
(-> hit (filter :a %))
(-> hit (filter :a))
(->> hit (filter :a))
(->> hit (filter :a) #(assoc % :b "asd"))
(->> hit (filter :a) (#(assoc % :b "asd")))
(-> hit (filter :a) (#(assoc % :b "asd")))
(->> hit (filter :a) ((fn [b] (assoc b :b "asd"))))
(->> hit (filter :a) ((fn [b] (map assoc b :b "asd"))))
(->> hit (filter :a) ((fn [b] (map #(assoc % :b "asd") b))))
(figwheel-sidecar.repl-api/cljs-repl)
(false? false)
(boolean 12)
:cljs/quit
(figwheel-sidecar.repl-api/reset-autobuild)
(boolean 0)
(some #(= % 1) (range 10))
(some #(= % 11) (range 10))
(figwheel-sidecar.repl-api/reset-autobuild)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(reset)
(run)
(reset)
(figwheel-sidecar.repl-api/reset-autobuild)
(reset)
(figwheel-sidecar.repl-api/reset-autobuild)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(run)
(reset)
(figwheel-sidecar.repl-api/reset-autobuild)
(reset)
(figwheel-sidecar.repl-api/reset-autobuild)
(reset)
(run)
(reset)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(reset)
(figwheel-sidecar.repl-api/reset-autobuild)
(run)
update
(update {:word "a"} :anns #(conj % [1]))
(update {:word "a"} :anns #(cons % [1]))
(update {:word "a"} :anns #(concat % [1]))
(update {:word "a"} :anns #(conj % 1))
(update {:word "a"} :anns #(conj [%] 1))
(update {:word "a"} :anns #(conj % 1))
(update {:word "a" :anns [2]} :anns #(conj % 1))
(update {:word "a" :anns '(2)} :anns #(conj % 1))
(update {:word "a" :anns '(2)} :anns #(cons % 1))
(update {:word "a" :anns '(2)} :anns #(conj % [1]))
(update {:word "a" :anns '(2)} :anns #(cons % [1]))
(update {:word "a" :anns '(2)} :anns #(concat % [1]))
(update {:word "a" :anns '(2)} :anns #(vec % [1]))
(update {:word "a" :anns '(2)} :anns #(vector % [1]))
(update {:word "a" :anns '(2)} :anns #(vector % 1))
(update {:word "a" :anns [2]} :anns #(vector % 1))
(update {:word "a"} :anns #(vector % 1))
(update {:word "a"} :anns #(concat % 1))
(update {:word "a"} :anns #(concat % [1]))
(update {:word "a" :anns '(2)} :anns #(concat % [1]))
(update {:word "a"} :anns #(concat % 1))
(let [{:keys [a [k v]]} {:a {:kk :vv}] [k v])
(let [{:keys [a [k v]]} {:a {:kk :vv}}] [k v])
(first {:a :b})
(keys {:a :b})
(let [[a] (keys {:a :b})] [a])
(let [[a] (keys {:a :b})] a)
(figwheel-sidecar.repl-api/reset-autobuild)
vals
(update {:word "a"} :anns #(concat % 1))
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(System/currentTimeMillis)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
((partial = 1) 1)
(cons [] {:a "a})
)
}
)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(not 1)
(nth 1 [0 1 2])
(nth [0 1 2] 1)
(nth [] 0)
(get [] 0)
(get [] 10)
(get '() 0)
(figwheel-sidecar.repl-api/stop-figwheel!)
(figwheel-sidecar.repl-api/start-autobuild)
(figwheel-sidecar.repl-api/reset-autobuild)
(reset)
(figwheel-sidecar.repl-api/reset-autobuild)
(clojure.string/split "asd=asd" #"=")
(if-let [[a b] (clojure.string/split "asd=asd" #"=")] [b a])
(if-let [[a b] (clojure.string/split "asdasd" #"=")] [b a])
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(defn x [{w :w}] w)
(x {:w "w"})
(get {:a "a"} :b "server")
(get {:a "a"} nil "server")
(get {:a "a"} [] "server")
(reset)
(figwheel-sidecar.repl-api/reset-autobuild)
(reset)
(figwheel-sidecar.repl-api/reset-autobuild)
(reset)
(figwheel-sidecar.repl-api/reset-autobuild)
(apply str (interleave " " "a" "b" ""))
(interleave " " "a" "b" "")
(interleave " " ["a" "b" ""])
(apply str (interleave " " ["a" "b" ""]))
(figwheel-sidecar.repl-api/reset-autobuild)
(nth (map inc (range 10)) 4)
(get (map inc (range 10)) 4)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(run)
(reset)
(figwheel-sidecar.repl-api/reset-autobuild)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(figwheel-sidecar.repl-api/cljs-repl)
(js/Date)
(js/Date.)
(js/Date)
(.parse js/Date (js/Date))
js/localStorage
(.length js/localStorage)
(.-length js/localStorage)
(js->clj js/localStorage)
(keys (js->clj js/localStorage))
(.keys js/Object js/localStorage)
(js->clj (.keys js/Object js/localStorage))
(js/Date)
(js/Date.)
(js/Date)
(.parse js/Date (js/Date))
(.toLocaleString (.parse js/Date (js/Date)) "en-US")
(.toLocaleString (js/Date) "en-US")
(.toLocaleString (js/Date.) "en-US")
(js/Date. (js/Date))
(def date-str (js/Date))
date-str
(js/Date. date-str)
js/user
js/username
last
(cleebo.localstorage/recover-all-db-keys)
 (js->clj (.keys js/Object js/localStorage))
(first (js->clj (.keys js/Object js/localStorage)))
(js/Date. (first (js->clj (.keys js/Object js/localStorage))))
(.toLocaleString (js/Date. (first (js->clj (.keys js/Object js/localStorage)))) "en-US")
(cleebo.localstorage/recover-all-db-keys)
(.toLocaleString (js/Date. (first (js->clj (.keys js/Object js/localStorage)))) "en-US")
(js/Date. (first (js->clj (.keys js/Object js/localStorage))))
 (js->clj (.keys js/Object js/localStorage))
(keys {})
(intp (hash-set) '({} {} nil))
(into (hash-set) '({} {} nil))
(keys nil)
(map vector (map vector (range 10)))
(concat [:a] [:b] (map vector (map vector (range 10)))
)
(concat [[:a]] [[:b]] (map vector (map vector (range 10))))
(concat [[[:a]]] [[[:b]]] (map vector (map vector (range 10))))
({:a "a"} :a)
(:a {:a "a"})
(some :a [{:a "a"} {:b "b"}])
(some :c [{:a "a"} {:b "b"}])
(some :c [{:a "a" :b "b"} {:b "b"}])
(some :a [{:a "a" :b "b"} {:b "b"}])
(filter :a [{:a "a" :b "b"} {:b "b"}])
(first (filter :a [{:a "a" :b "b"} {:b "b"}])
)
(first (filter :b [{:a "a" :b "b"} {:b "b"}]))
(first (filter :c [{:a "a" :b "b"} {:b "b"}]))
(first (filter "a" [{"a" "a" :b "b"} {:b "b"}]))
(first (filter #(get "a" %) [{"a" "a" :b "b"} {:b "b"}]))
(first (filter #(get % "a") [{"a" "a" :b "b"} {:b "b"}]))
(set #{1 2 3})
(seq #{1 2 3})
(concat [[[:a]]] [[[:b]]] (map vector (map vector (range 10))))
(into [[[:a]]] [[[:b]]] (map vector (map vector (range 10))))
(concat [[[:a]]] [[[:b]]] (map vector (map vector (range 10))))
(concat [[:a]] [[:b]] (map vector (map vector (range 10))))
(concat [[:a]] [[:b]] (map vector (range 10)))
but-last
butlast
(butlast (range 10) 2)
(butlast (range 10))
(droplast
)
(drop-last 0 (range 10)
)
(drop-last -1 (range 10))
(drop-last 4 (range 10))
(figwheel-sidecar.repl-api/reset-autobuild)
cljs/:quit
:cljs/quit
(figwheel-sidecar.repl-api/reset-autobuild)
(schema.core/coerce)
(schema.coerce/coercer )
(reset)
(figwheel-sidecar.repl-api/reset-autobuild)
(let [{:keys [a b] :as x} nil] [a b])
(if-let [{:keys [a b] :as x} nil] [a b] "NIL!!")
(run)
(cleebo.utils/->int "a")
(reset)
(run)
(reset)
(figwheel-sidecar.repl-api/reset-autobuild)
(drop-while #(neg? (:id %)) [{:id -1} {:id -1} {:id 2}])
(reset)
(figwheel-sidecar.repl-api/reset-autobuild)
(reset)
(figwheel-sidecar.repl-api/reset-autobuild)
(figwheel-sidecar.repl-api/cljs-repl)
(.parseInt "a")
(js/parseInt "a")
(js->clj (js/parseInt "a"))
(nil? (js/parseInt "a"))
(class (js/parseInt "a"))
(js/parseInt "a")
(if-let [a (js/parseInt "a")] [a])
(if-let [a (js/parseInt "a")] [a] "a")
(js/isNaN (js/parseInt "a"))
(int "a")
(int "1")
:cljs/quit
(int "1")
(int \1)
(figwheel-sidecar.repl-api/cljs-repl)
(-> "1" js/parseInt js/isNaN)
(-> "a" js/parseInt js/isNaN)
(for [a (range 10) :when (< 2 a)] [a])
:cljs/quit
(figwheel-sidecar.repl-api/cljs-repl)
:cljs/quit
(figwheel-sidecar.repl-api/reset-autobuild)
(run)
(reset)
(cleebo.blacklab/close-all-searchers! (get-in system [:components :blacklab]))
system
(keys system)
(cleebo.blacklab/close-all-searchers! (get-in system [:blacklab]))
(
)
(def x (zipmap [:a :b :c] (repeat (atom nil))))
x
repeat
(clojure.do repeat)
(clojure.doc repeat)
(def x (zipmap [:a :b :c] (repeatedly (fn [] (atom nil)))))
x
(reset)
(cleebo.blacklab/close-all-searchers! (get-in system [:components :blacklab]))
(run)
(cleebo.db.annotations/fetch-annotation (:db system) 2616461)
(cleebo.db.annotations/fetch-annotation (:db system) 2616461 2616465)
(keys (cleebo.db.annotations/fetch-annotation (:db system) 2616461 2616465))
(figwheel-sidecar.repl-api/reset-autobuild)
(figwheel-sidecar.repl-api/clean-builds)
(figwheel-sidecar.repl-api/stop-figwheel!)
(reset)
(run)
(reset)
(run)
(alembic.still/distill '[org.clojure/core.match "0.3.0-alpha4"])
(str "asd" "asd")
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(reset)
(figwheel-sidecar.repl-api/reset-autobuild)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(reset)
(run)
(reset)
(run)
(reset)
(run)
(reset)
(stop)
(run)
(def x (atom {:a nil :b nil}))
(if-let [{:keys [a]} @x] [a])
(if-let [{:keys [a]} @x] [a] ["a"])
(if-let [{a :a} @x] [a] ["a"])
(if-let [a (:a @x)] [a] ["a"])
(if-let [a (:a {:a false})] a "b")
(figwheel-sidecar.repl-api/reset-autobuild)
(reset)
(run)
(schema.core/check {:a :a} {:a :a})
(schema.core/check {:a schema.core/Keyword} {:a :a})
(schema.core/check {:a (schema.core/enum [:a])} {:a :a})
(reset)
(run)
\
(reset)
(run)
(reset)
(figwheel-sidecar.repl-api/reset-autobuild)
(run)
{2616378 {:anns [{:history [(not (map? a-clojure.lang.PersistentVector))]}]}} {:type :schema.core/error, :schema (maybe {Int {:anns [{:ann {:key Str, :value (conditional clojure.lang.Keyword {:IOB Str} clojure.core$constantly/fn--4614 Str)}, :timestamp Int, :username Str, (optional-key :history) [{:ann {:key Str, :value (conditional clojure.lang.Keyword {:IOB Str} clojure.core$constantly/fn--4614 Str)}, :timestamp Int, :username Str}]}], :_id Int}}), :value {2616378 {:anns [{:history [[{:_id 2616378, :anns [{:ann {:key "pos", :value "NN"}, :username "user", :timestamp 1457531784140}]}]], :timestamp 1457610431512, :username "user", :ann {:value "NNP", :key "pos"}}], :_id 2616378}, 2616380 {:anns [{:timestamp 1457525168715, :username "Hi!", :ann {:value "A", :key "nonA"}}], :_id 2616380}}, :error {2616378 {:anns [{:history [(not (map? a-clojure.lang.PersistentVector))]}]}}}
(let [{{:keys [a b]} :a} {:a {:a "a"}}] a)
[{:history [[{:_id 2616381, :anns [{:ann {:key "pos", :value "ART"}, :username "user", :timestamp 1457616053737}]}] [{:_id 2616381, :anns [{:ann {:key "pos", :value "A"}, :username "user", :timestamp 1457616125225, :history [[{:anns [{:timestamp 1457616053737, :username "user", :ann {:value "ART", :key "pos"}}], :_id 2616381}]]}]}] [{:_id 2616381, :anns [{:ann {:key "pos", :value "B"}, :username "user", :timestamp 1457616164830, :history [[{:anns [{:timestamp 1457616053737, :username "user", :ann {:value "ART", :key "pos"}}], :_id 2616381}] [{:anns [{:history [[{:_id 2616381, :anns [{:ann {:key "pos", :value "ART"}, :username "user", :timestamp 1457616053737}]}]], :timestamp 1457616125225, :username "user", :ann {:value "A", :key "pos"}}], :_id 2616381}]]}]}]], :timestamp 1457616206531, :username "user", :ann {:value "H", :key "pos"}}]
(def a [{:history [[{:_id 2616381, :anns [{:ann {:key "pos", :value "ART"}, :username "user", :timestamp 1457616053737}]}] [{:_id 2616381, :anns [{:ann {:key "pos", :value "A"}, :username "user", :timestamp 1457616125225, :history [[{:anns [{:timestamp 1457616053737, :username "user", :ann {:value "ART", :key "pos"}}], :_id 2616381}]]}]}] [{:_id 2616381, :anns [{:ann {:key "pos", :value "B"}, :username "user", :timestamp 1457616164830, :history [[{:anns [{:timestamp 1457616053737, :username "user", :ann {:value "ART", :key "pos"}}], :_id 2616381}] [{:anns [{:history [[{:_id 2616381, :anns [{:ann {:key "pos", :value "ART"}, :username "user", :timestamp 1457616053737}]}]], :timestamp 1457616125225, :username "user", :ann {:value "A", :key "pos"}}], :_id 2616381}]]}]}]], :timestamp 1457616206531, :username "user", :ann {:value "H", :key "pos"}}])
a
(count a)
(first a)
(:history (first a))
(count (:history (first a)))
(first (:history (first a)))
(second (:history (first a)))
(conj 1 [1])
(cons 1 [1])
(concat 1 [1])
(concat [1] [])
(get-in [:a :b)
(get-in [:a :b])
clojure.lang.LazySeq@408d9b10
(def db (:db system))
db
(cleebo.db.annotations/new-token-annotation db 2616378 {:username "a" :timestamp 0 :ann {:key "animate" :value "false"}})
(reset)
(cleebo.db.annotations/new-token-annotation db 2616378 {:username "a" :timestamp 0 :ann {:key "animate" :value "false"}})
(def db (:db system))
(cleebo.db.annotations/new-token-annotation db 2616378 {:username "a" :timestamp 0 :ann {:key "animate" :value "false"}})
(reset)
(def db (:db system))
(cleebo.db.annotations/new-token-annotation db 2616378 {:username "a" :timestamp 0 :ann {:key "animate" :value "false"}})
(reset)
(def db (:db system))
(cleebo.db.annotations/new-token-annotation db 2616378 {:username "a" :timestamp 0 :ann {:key "animate" :value "false"}})
(cleebo.db.annotations/new-token-annotation db 2616378 {:username "a" :timestamp 0 :ann {:key "animate" :value "true"}})
(run)
(reset)
(figwheel-sidecar.repl-api/reset-autobuild)
(update-in {:a {:b "b"}} [:a :b] "c")
(update-in {:a {:b "b"}} [:a :b] #("a"))
(update-in {:a {:b "b"}} [:a :b] (fn [a] "a"))
(update-in {:a {:b "b"}} [:a :b] (fn [a] "c"))
(update-in {:a {:b "b"}} [:a] (fn [a] (assoc a :b "c")))
cond->>
(clojure.repl/doc cond->>)
