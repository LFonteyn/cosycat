(stop)
(run)
(get-in {:a {:b "b}} [:a :b :c] "a")
)
})
)
))))
"
)
(get-in {:a {:b "b"}} [:a :b :c] "a")
(dissoc {:a {:b "b"}} :b)
(dissoc {:a {:b "b"}} :basd)
(format "%d" 1)
(defn fnx [a & [b]] (let [{:keys [c d e] :or {c "c" d (str c "d") e "e"}} b] [c d e]))
(fnx "" :c "g" :d "e" :e "h")
(run)
(defn x [& {:keys [a b c]}] [a b c])
(x {:a "a"})
(x :a {:a "a"})
(defn x [& [{:keys [a b c]}]] [a b c])
(x {:a "a"})
(defn x [& [{:keys [a b c] :as data}]] data)
(x {:a "a"})
update
(run)
(reset)
(run)
(reset)
(count [1 2 3])
(reset)
(run)
(reset)
(run)
(reset)
(run)
(reset)
(run)
(reset)
(run)
(reset)
(run)
(reset)
(run)
(restart)
(run)
(restart)
(reset)
(run)
system
(keys system)
(:figwheel system)
(run)
\
(reset)
(run)
(reset)
(run)
(reset)
(run)
(reset)
(run)
(reset)
(run)
(reset)
(run)
:
)
(reset)
(keyword ":match")
(figwheel-sidecar.repl-api/reset-autobuild)
(reset)
(figwheel-sidecar.repl-api/reset-autobuild)
(reset)
(run)
(reset)
(figwheel-sidecar.repl-api/reset-autobuild)
round
(run)
(reset)
(figwheel-sidecar.repl-api/reset-autobuild)
(reset)
(boolean {})
(empty? {})
(boolean {})
(reset)
(figwheel-sidecar.repl-api/reset-autobuild)
(reset)
(run)
(reset)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(reset)
(figwheel-sidecar.repl-api/reset-autobuild)
(reset)
(+ 1 2)
(def x "a")
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(:blacklab system)
(:-hits (:blacklab system))
@(:-hits (:blacklab system))
(figwheel-sidecar.repl-api/reset-autobuild)
@(:-hits (:blacklab system))
(reset)
@(:-hits (:blacklab system))
(figwheel-sidecar.repl-api/reset-autobuild)
(reset)
(figwheel-sidecar.repl-api/reset-autobuild)
(reset)
(figwheel-sidecar.repl-api/reset-autobuild)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(reset)
(run)
(reset)
(run)
(reset)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
D
(figwheel-sidecar.repl-api/reset-autobuild)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(run)
(reset)
(stop)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
\
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
CC
(reset)
(figwheel-sidecar.repl-api/reset-autobuild)
(reset)
(figwheel-sidecar.repl-api/reset-autobuild)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(reset)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(reset)
(figwheel-sidecar.repl-api/reset-autobuild)
(:blacklab system)
(reset)
(figwheel-sidecar.repl-api/reset-autobuild)
(reset)
(run)
(reset)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(run)
(use 'cleebo.core)
(run!)
ls
(run)
cleebo.core/run
cleebo.core
(use 'cleebo.core)
(require 'cleebo.core)
(require 'cleebo.core :as c)
(require 'cleebo.core :as 'c)
(require ['cleebo.core :as c])
(require ['cleebo.core])
(run)
(reset)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(+ 1 2)
(run)
(reset)
(run)
(reset)
(restart)
(run)
(reset)
(run)
(reset)
(run)
(reset)
(run)
(reset)
(run)
(reset)
(run)
(reset)
(run)
(reset)
(run)
(stop)
(reset)
(run)
(reset)
(run)
(reset)
(run)
(reset)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(reset)
(run)
(reset)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(reset)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(reset)
(run)
(reset)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(reset)
(run)
(reset)
(run)
(reset)
(run)
(reset)
(run)
(reset)
(run)
(reset)
(run)
(reset)
(run)
(reset)
(run)
(def x {1 {2 (atom {})}})
x
(let [a (get-in x [1 2])] a)
(let [a (get-in x [1 2])] (reset! a "@"))
x
(reset)
(figwheel-sidecar.repl-api/reset-autobuild)
(run)
(reset)
(figwheel-sidecar.repl-api/reset-autobuild)
(alembic.still/distill '[cljsjs/react-bootstrap "0.28.1-0"])
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(run)
(reset)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(reset)
(figwheel-sidecar.repl-api/reset-autobuild)
(reset)
(figwheel-sidecar.repl-api/reset-autobuild)
(run)
(reset)
(run)
(reset)
(figwheel-sidecar.repl-api/reset-autobuild)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(reset)
(figwheel-sidecar.repl-api/reset-autobuild)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(run)
(reset)
(figwheel-sidecar.repl-api/reset-autobuild)
(reset)
(run)
(reset)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(reset)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(reset)
(figwheel-sidecar.repl-api/reset-autobuild)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(def args [+ 1])
(apply update-in {"a" 1} ["a"] args)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(assoc-in {} [:a :b] "a" [:b] "b)
)
}
)
(assoc-in {} [:a :b] "a" [:b] "b")
(assoc {} [:a :b] "a" [:b] "b")
(-> {} (assoc-in [:a :b] "a" [:b] "b"))
(-> {} (assoc-in [:a :b] "a") (assoc-in [:b] "b"))
(merge (-> {} (assoc-in [:a :b] "a") (assoc-in [:b] "b")) nil)
 {:hit ({:punct " ", :facs "-", :pos "?", :lemma "ballot", :id "3055", :xmlid "w.wx.3445", :word "ballot"} {:punct " , ", :facs "-", :pos "?", :lemma "when", :id "3056", :xmlid "w.wx.3447", :word "when"} {:punct " ", :facs "-", :pos "?", :lemma "texas", :id "3057", :xmlid "w.wx.3448", :word "Texas"} {:punct " ", :facs "-", :pos "?", :lemma "vote", :id "3058", :xmlid "w.wx.3449", :word "votes"} {:punct " ", :facs "-", :pos "?", :lemma "on", :id "3059", :xmlid "w.wx.3450", :word "on"} {:punct " ", :facs "-", :pos "?", :lemma "a", :id "3060", :xmlid "w.wx.3451", :word "a", :match true} {:punct " ", :facs "-", :pos "?", :lemma "u.s.", :id "3061", :xmlid "w.wx.3452", :word "U.S."} {:punct " ", :facs "-", :pos "?", :lemma "senator", :id "3062", :xmlid "w.wx.3453", :word "senator"} {:punct " . ", :facs "-", :pos "?", :lemma "rep.", :id "3063", :xmlid "w.wx.3455", :word "Rep."} {:punct " ", :facs "-", :pos "?", :lemma "wesley", :id "3064", :xmlid "w.wx.3456", :word "Wesley"} {:punct " ", :facs "-", :pos "?", :lemma "robert", :id "3065", :xmlid "w.wx.3457", :word "Roberts"})
}
 {:hit '({:punct " ", :facs "-", :pos "?", :lemma "ballot", :id "3055", :xmlid "w.wx.3445", :word "ballot"} {:punct " , ", :facs "-", :pos "?", :lemma "when", :id "3056", :xmlid "w.wx.3447", :word "when"} {:punct " ", :facs "-", :pos "?", :lemma "texas", :id "3057", :xmlid "w.wx.3448", :word "Texas"} {:punct " ", :facs "-", :pos "?", :lemma "vote", :id "3058", :xmlid "w.wx.3449", :word "votes"} {:punct " ", :facs "-", :pos "?", :lemma "on", :id "3059", :xmlid "w.wx.3450", :word "on"} {:punct " ", :facs "-", :pos "?", :lemma "a", :id "3060", :xmlid "w.wx.3451", :word "a", :match true} {:punct " ", :facs "-", :pos "?", :lemma "u.s.", :id "3061", :xmlid "w.wx.3452", :word "U.S."} {:punct " ", :facs "-", :pos "?", :lemma "senator", :id "3062", :xmlid "w.wx.3453", :word "senator"} {:punct " . ", :facs "-", :pos "?", :lemma "rep.", :id "3063", :xmlid "w.wx.3455", :word "Rep."} {:punct " ", :facs "-", :pos "?", :lemma "wesley", :id "3064", :xmlid "w.wx.3456", :word "Wesley"} {:punct " ", :facs "-", :pos "?", :lemma "robert", :id "3065", :xmlid "w.wx.3457", :word "Roberts"})}
(def x {:hit '({:punct " ", :facs "-", :pos "?", :lemma "ballot", :id "3055", :xmlid "w.wx.3445", :word "ballot"} {:punct " , ", :facs "-", :pos "?", :lemma "when", :id "3056", :xmlid "w.wx.3447", :word "when"} {:punct " ", :facs "-", :pos "?", :lemma "texas", :id "3057", :xmlid "w.wx.3448", :word "Texas"} {:punct " ", :facs "-", :pos "?", :lemma "vote", :id "3058", :xmlid "w.wx.3449", :word "votes"} {:punct " ", :facs "-", :pos "?", :lemma "on", :id "3059", :xmlid "w.wx.3450", :word "on"} {:punct " ", :facs "-", :pos "?", :lemma "a", :id "3060", :xmlid "w.wx.3451", :word "a", :match true} {:punct " ", :facs "-", :pos "?", :lemma "u.s.", :id "3061", :xmlid "w.wx.3452", :word "U.S."} {:punct " ", :facs "-", :pos "?", :lemma "senator", :id "3062", :xmlid "w.wx.3453", :word "senator"} {:punct " . ", :facs "-", :pos "?", :lemma "rep.", :id "3063", :xmlid "w.wx.3455", :word "Rep."} {:punct " ", :facs "-", :pos "?", :lemma "wesley", :id "3064", :xmlid "w.wx.3456", :word "Wesley"} {:punct " ", :facs "-", :pos "?", :lemma "robert", :id "3065", :xmlid "w.wx.3457", :word "Roberts"})})
x
(:hit x)
(some #(= "3055" (:id %)) (:hit x))
(some #(= "3055s" (:id %)) (:hit x))
(figwheel-sidecar.repl-api/reset-autobuild)
(boolean 0)
(figwheel-sidecar.repl-api/reset-autobuild)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
C
(run)
(into {} (interleave (range 10) (range 10 20)))
(interleave (range 10) (range 10 20))
(apply hash-map (interleave (range 10) (range 10 20)))
(into {} (apply hash-map (interleave (range 10) (range 10 20))) {0 100})
(hash-map 1 2 12 1)
(hash-map [1 2 12 1])
(apply hash-map [1 2 12 1])
(hash-map [1 2 12 1])
(merge {} [1 2 12 1])
(merge {} [[1 2] [12 1]])
(figwheel-sidecar.repl-api/reset-autobuild)
(interleave (for [i (range 2)] [:i (for [j (range 2 4)] [j])]) (for [i (range 4 6)] [i (for [j (range 6 8)] [j])]))
(interleave (for [i (range 2)] [:i (for [j (range 2 4)] [j])]) (for [i (range 4 6)] [:j (for [j (range 6 8)] [j])]))
(into [:td] [:input] [:num])
(into [:td] 1 2 3)
(into [:td] [:s])
(run)
(alembic.still/distill '[prismatic/schema "1.0.5"])
(alembic.still/distill '[binaryage/devtools "0.5.2"])
(figwheel-sidecar.repl-api/reset-autobuild)
(run)
(concat (for [i (range 10)] [i]]) [1])
(concat (for [i (range 10)] [i]) [1])
(into (for [i (range 10)] [i]) [1])
(conj (for [i (range 10)] [i]) [1])
(cons (for [i (range 10)] [i]) [1])
(cons (for [i (range 10)] [i]) 1)
(conj (for [i (range 10)] [i]) [1])
(count {1 1})
(count {})
(frequencies "asdasdasdasdgagadfhadh")
(for [[a b] (frequencies "asdasdasdasdgagadfhadh")] [b a])
(figwheel-sidecar.repl-api/reset-autobuild)
(def x "asd")
(alert "hey!")
(js/alert "hey!")
(figwheel-sidecar.repl-api/api-help)
(figwheel-sidecar.repl-api/cljs-repl)
(alert "hey")
(js/alert "hey")
(println "a"0
)
(println "a")
(cljs.user)
(println cljs.user)
(println cljs.env)
(require-macros
)
cleebo.env
cleebo.env/cljs-env
(cleebo.env/cljs-env :corpora)
(cleebo.env/cljs-env :cqp)
js/document.referrer
js/document.userAgent
js/navigator.userAgent
(ajax.core/ajax-request {:method :head})
(ajax.core/ajax-request {:uri "/" :method :head})
(ajax.core/ajax-request {:uri "/" :method :head :response-format :json})
(ajax.core/ajax-request {:uri "/" :method :head :response-format [:json]})
(ajax.core/ajax-request {:uri "/" :method :head :response-format :transit})
(ajax.core/ajax-request {:uri "/blacklab" :method :head :response-format :transit})
(ajax.core/ajax-request {:uri "/blacklab" :method :head)
(ajax.core/ajax-request {:uri "/blacklab" :method :head})
(ajax.core/ajax-request {:uri "/blacklab" :method :head :handler #(.log js/console %})
(ajax.core/ajax-request {:uri "/blacklab" :method :head :handler #(.log js/console %)})
(ajax.core/GET {:uri "/blacklab" :handler #(.log js/console %)})
(ajax.core/HEAD {:uri "/blacklab" :handler #(.log js/console %)})
(ajax.core/HEAD {:uri "/" :handler #(.log js/console %)})
exit
(run)
(figwheel-sidecar.repl-api/cljs-repl)
(ajax.core/HEAD {:uri "/ping" :handler #(.log js/console %)})
(ajax.core/HEAD "/ping" {:handler #(.log js/console %)})
(ajax.core/HEAD "/ping" {:handler #(println %)})
(ajax.core/HEAD "/ping" {:handler #(println (:session %))})
(ajax.core/HEAD "/ping" {:handler #(.log js/console (:session %))})
(ajax.core/HEAD "/ping" {:handler #(.log js/console %)})
(ajax.core/HEAD "/ping" {:handler #(.getAllResponseHeaders %)})
(ajax.core/HEAD "/ping" {:handler #(println (.getAllResponseHeaders %))})
(ajax.core/HEAD "/ping" {:handler #(println (class %))})
(ajax.core/HEAD "/ping" {:handler #(keys %)})
(figwheel-sidecar.repl-api/reset-autobuild)
(figwheel-sidecar.components.cljs-autobuild)
(use 'figwheel-sidecar.repl-api)
:cljs/quit
(figwheel-sidecar.repl-api/reset-autobuild)
(use 'figwheel-sidecar.repl-api)
(figwheel-sidecar.repl-api/cljs-repl)
js/username
cljs/:quit
:cljs/quit
exit
(run)
(def hits [[{:a "a" :b "b"} {:a "a" :c "c"}] [{:a "a" :b "b"} {:a "a" :c "c"}] [{:a "a" :b "b"} {:a "a" :c "c"}]])
hits
(def hit [{:a "a" :b "b"} {:c "c"} {:a "a" :b "b"} {:d "d"}])
(-> hit #(filter :a %) #(map :a %))
(-> hit #(filter :a %) #(assoc % :b "asd"))
(-> hit #(filter :a %))
hit
(-> hit #(filter :a %))
((-> hit #(filter :a %)))
(-> hit (filter :a %))
(-> hit (filter :a))
(->> hit (filter :a))
(->> hit (filter :a) #(assoc % :b "asd"))
(->> hit (filter :a) (#(assoc % :b "asd")))
(-> hit (filter :a) (#(assoc % :b "asd")))
(->> hit (filter :a) ((fn [b] (assoc b :b "asd"))))
(->> hit (filter :a) ((fn [b] (map assoc b :b "asd"))))
(->> hit (filter :a) ((fn [b] (map #(assoc % :b "asd") b))))
(figwheel-sidecar.repl-api/cljs-repl)
(false? false)
(boolean 12)
:cljs/quit
(figwheel-sidecar.repl-api/reset-autobuild)
(boolean 0)
(some #(= % 1) (range 10))
(some #(= % 11) (range 10))
(figwheel-sidecar.repl-api/reset-autobuild)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(reset)
(run)
(reset)
(figwheel-sidecar.repl-api/reset-autobuild)
(reset)
(figwheel-sidecar.repl-api/reset-autobuild)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(run)
(reset)
(figwheel-sidecar.repl-api/reset-autobuild)
(reset)
(figwheel-sidecar.repl-api/reset-autobuild)
(reset)
(run)
(reset)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(reset)
(figwheel-sidecar.repl-api/reset-autobuild)
(run)
update
(update {:word "a"} :anns #(conj % [1]))
(update {:word "a"} :anns #(cons % [1]))
(update {:word "a"} :anns #(concat % [1]))
(update {:word "a"} :anns #(conj % 1))
(update {:word "a"} :anns #(conj [%] 1))
(update {:word "a"} :anns #(conj % 1))
(update {:word "a" :anns [2]} :anns #(conj % 1))
(update {:word "a" :anns '(2)} :anns #(conj % 1))
(update {:word "a" :anns '(2)} :anns #(cons % 1))
(update {:word "a" :anns '(2)} :anns #(conj % [1]))
(update {:word "a" :anns '(2)} :anns #(cons % [1]))
(update {:word "a" :anns '(2)} :anns #(concat % [1]))
(update {:word "a" :anns '(2)} :anns #(vec % [1]))
(update {:word "a" :anns '(2)} :anns #(vector % [1]))
(update {:word "a" :anns '(2)} :anns #(vector % 1))
(update {:word "a" :anns [2]} :anns #(vector % 1))
(update {:word "a"} :anns #(vector % 1))
(update {:word "a"} :anns #(concat % 1))
(update {:word "a"} :anns #(concat % [1]))
(update {:word "a" :anns '(2)} :anns #(concat % [1]))
(update {:word "a"} :anns #(concat % 1))
(let [{:keys [a [k v]]} {:a {:kk :vv}] [k v])
(let [{:keys [a [k v]]} {:a {:kk :vv}}] [k v])
(first {:a :b})
(keys {:a :b})
(let [[a] (keys {:a :b})] [a])
(let [[a] (keys {:a :b})] a)
(figwheel-sidecar.repl-api/reset-autobuild)
vals
(update {:word "a"} :anns #(concat % 1))
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(System/currentTimeMillis)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
