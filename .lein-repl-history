(run)
(reset)
(+ 19 19 50)
(reset)
(run)
(reset)
(
)
(use 'figwheel-sidecar.repl-api)
(start-figwheel!)
(cljsjs-repl)
(cljsjs.repl-api)
(cljs-repl)
(figwheel-sidecar.repl-api)
(use 'figwheel-sidecar.repl-api)
(start-figwheel!)
(cljs-repl)
(run)
(use 'figwheel-sidecar.repl-api)
(start-figwheel!)
(use 'figwheel-sidecar.repl-api)
(start-figwheel!)
(cljs-repl)
(run)
(use 'figwheel-sidecar.repl-api)
(start-figwheel!)
(cljs-repl)
(run)
(use 'figwheel-sidecar.repl-api)
(start-figwheel!)
(cljs-repl)
(use 'figwheel-sidecar.repl-api)
(start-figwheel!)
(cljs-repl)
(run)
(use 'figwheel-sidecar.repl-api)
(start-figwheel!)
(cljs-repl)
(run)
system
(sys/cljs-repl (:figwheel-system system))
(sys/cljs-repl (:figwheel-system #'system))
(sys/cljs-repl (:figwheel-system @system))
(sys/cljs-repl (:figwheel-system system))
(sys/cljs-repl (:figwheel system))
env
(keys env)
(:env env)
(:id env)
(:user env)
(run)
(reset)
(run)
(reset)
(run)
(f-repl/cljs-repl)
(:figwheel system)
(in-ns cleebo.figwheel)
(in-ns 'cleebo.figwheel)
(f-repl/cljs-repl)
(in-ns 'cleebo.figwheel)
(f-repl/cljs-repl)
(run)
(in-ns 'cleebo.core)
(run)
(in-ns 'cleebo.figwheel)
(f-repl/cljs-repl)
(run)
(reset)
(run)
(reset)
(run)
(reset)
(figwheel/build-cljs figwheel)
(run)
(
)
(system)
system
(run)
(.log js/console "Hey!")
(run)
(reset)
(in-ns cleebo.core)
:cljs/quit
cljs/quit
:cljs/quit
(:cljs/quit)
(reset-autobuild)
(figwheel-sidecar.config)
figwheel-sidecar.config
;figwheel-sidecar.config
'figwheel-sidecar.config
(figwheel-sidecar.repl
)
(run)
(mount-root)
(in-ns cleebo.figwheel)
(in-ns 'cleebo.figwheel)
(in-ns 'cleebo.core
)
system
(figwheel-sidecar.repl-api/cljs-repl (:figwheel system))
(mount-root)
cleebo.core/mount-root
(cleebo.core/mount-root)
figwheel.client.utils
(figwheel.client.utils)
(figwheel.client.utils/dev)
figwheel.client.utils/dev
figwheel.client.utils/dev-assert
(figwheel.client.utils/dev-assert)
(cleebo.core/mount-root)
(run)
(figwheel-sidecar.repl-api/cljs-repl (:figwheel system))
(cleebo.core/mount-root)
:cljs/quit
(run)
(reset)
(run)
(reset)
(run)
(reset)
(run)
update-in
(doc update-in)
(conj ["a"])
sen
(conj ["a"])
(run)
(reset)
(run)
(reset)
system
(:ws system)
(:channels (:ws system))
@(:channels (:ws system))
(run)
@(:channels (:ws system))
(reset)
(run)
(reset)
(figwheel-sidecar.repl-api/cljs-repl)
(cleebo.core/mount-root)
(mount-root)
(run)
(figwheel-sidecar.repl-api/cljs-repl)
(reset-autobuild) 
cljs:quit
exit
(run)
(:cqi-client system)
(use 'cleebo.cqp)
(cqi-query (:cqi-client system) "PYCCLE-ECCO" "the")
(cqi-query (:client (:cqi-client system)) "PYCCLE-ECCO" "the")
(:cqi-client system)
(:client (:cqi-client system))
(use 'cqp-clj)
(use 'cqp-clj.core)
(query! (:client (:cqi-client system)) "PYCCLE-ECCO" )
(query! (:client (:cqi-client system)) "PYCCLE-ECCO" "the")
(run)
(use 'cqp-clj.core)
(query! (:client (:cqi-client system)) "PYCCLE-ECCO" "the")
(reset)
(query! (:client (:cqi-client system)) "PYCCLE-ECCO" "the")
(use 'cqp-clj.core)
(query! (:client (:cqi-client system)) "PYCCLE-ECCO" "the")
(query! (:client (:cqi-client system)) "PYCCLE-ECCO" "[the]")
(reset)
(use 'cqp-clj.core)
(query! (:client (:cqi-client system)) "PYCCLE-ECCO" "[word='the']")
(reset)
(run)
restart
(restart)
(run)
(reset)
(figwheel-sidecar.repl-api/cljs-repl)
(run)
(reset)
(run)
(reset)
(run)
(reset)
(run)
and
'and
(and "a" "b")
(and nil nil)
(zipmap ["a" "b"] [1 2])
(fn [a [b & c]] [a b c])
(defn myfn [a [b & c]] [a b c])
(myfn "a" ["b" "c" "d"])
(myfn "a" "b" "c" "d")
((partial hash-map :id) 1)
(reset)
]
(run)
(reset)
(run)
(in-ns 'cleebo.core)
(run)
(reset)
(run)
(reset)
(run)
(defn fnx [a & [b]] (let [{:keys [c d e] :or {c "c" d "d" e "e"}} b] ) [c d e])
(defn fnx [a & [b]] (let [{:keys [c d e] :or {c "c" d "d" e "e"}} b] [c d e]))
(fnx "" {:c "g" :d "e" :e "h"})
(fnx "" :c "g" :d "e" :e "h")
(reset)
(stop)
(run)
(get-in {:a {:b "b}} [:a :b :c] "a")
)
})
)
))))
"
)
(get-in {:a {:b "b"}} [:a :b :c] "a")
(dissoc {:a {:b "b"}} :b)
(dissoc {:a {:b "b"}} :basd)
(format "%d" 1)
(defn fnx [a & [b]] (let [{:keys [c d e] :or {c "c" d (str c "d") e "e"}} b] [c d e]))
(fnx "" :c "g" :d "e" :e "h")
(run)
(defn x [& {:keys [a b c]}] [a b c])
(x {:a "a"})
(x :a {:a "a"})
(defn x [& [{:keys [a b c]}]] [a b c])
(x {:a "a"})
(defn x [& [{:keys [a b c] :as data}]] data)
(x {:a "a"})
update
(run)
(reset)
(run)
(reset)
(count [1 2 3])
(reset)
(run)
(reset)
(run)
(reset)
(run)
(reset)
(run)
(reset)
(run)
(reset)
(run)
(reset)
(run)
(restart)
(run)
(restart)
(reset)
(run)
system
(keys system)
(:figwheel system)
(run)
\
(reset)
(run)
(reset)
(run)
(reset)
(run)
(reset)
(run)
(reset)
(run)
(reset)
(run)
:
)
(reset)
(keyword ":match")
(figwheel-sidecar.repl-api/reset-autobuild)
(reset)
(figwheel-sidecar.repl-api/reset-autobuild)
(reset)
(run)
(reset)
(figwheel-sidecar.repl-api/reset-autobuild)
round
(run)
(reset)
(figwheel-sidecar.repl-api/reset-autobuild)
(reset)
(boolean {})
(empty? {})
(boolean {})
(reset)
(figwheel-sidecar.repl-api/reset-autobuild)
(reset)
(run)
(reset)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(reset)
(figwheel-sidecar.repl-api/reset-autobuild)
(reset)
(+ 1 2)
(def x "a")
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(:blacklab system)
(:-hits (:blacklab system))
@(:-hits (:blacklab system))
(figwheel-sidecar.repl-api/reset-autobuild)
@(:-hits (:blacklab system))
(reset)
@(:-hits (:blacklab system))
(figwheel-sidecar.repl-api/reset-autobuild)
(reset)
(figwheel-sidecar.repl-api/reset-autobuild)
(reset)
(figwheel-sidecar.repl-api/reset-autobuild)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(reset)
(run)
(reset)
(run)
(reset)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
D
(figwheel-sidecar.repl-api/reset-autobuild)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(run)
(reset)
(stop)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
\
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
CC
(reset)
(figwheel-sidecar.repl-api/reset-autobuild)
(reset)
(figwheel-sidecar.repl-api/reset-autobuild)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(reset)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(reset)
(figwheel-sidecar.repl-api/reset-autobuild)
(:blacklab system)
(reset)
(figwheel-sidecar.repl-api/reset-autobuild)
(reset)
(run)
(reset)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(run)
(use 'cleebo.core)
(run!)
ls
(run)
cleebo.core/run
cleebo.core
(use 'cleebo.core)
(require 'cleebo.core)
(require 'cleebo.core :as c)
(require 'cleebo.core :as 'c)
(require ['cleebo.core :as c])
(require ['cleebo.core])
(run)
(reset)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(+ 1 2)
(run)
(reset)
(run)
(reset)
(restart)
(run)
(reset)
(run)
(reset)
(run)
(reset)
(run)
(reset)
(run)
(reset)
(run)
(reset)
(run)
(reset)
(run)
(stop)
(reset)
(run)
(reset)
(run)
(reset)
(run)
(reset)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(reset)
(run)
(reset)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(reset)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(reset)
(run)
(reset)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(reset)
(run)
(reset)
(run)
(reset)
(run)
(reset)
(run)
(reset)
(run)
(reset)
(run)
(reset)
(run)
(reset)
(run)
(def x {1 {2 (atom {})}})
x
(let [a (get-in x [1 2])] a)
(let [a (get-in x [1 2])] (reset! a "@"))
x
(reset)
(figwheel-sidecar.repl-api/reset-autobuild)
(run)
(reset)
(figwheel-sidecar.repl-api/reset-autobuild)
(alembic.still/distill '[cljsjs/react-bootstrap "0.28.1-0"])
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(run)
(reset)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(reset)
(figwheel-sidecar.repl-api/reset-autobuild)
(reset)
(figwheel-sidecar.repl-api/reset-autobuild)
(run)
(reset)
(run)
(reset)
(figwheel-sidecar.repl-api/reset-autobuild)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(reset)
(figwheel-sidecar.repl-api/reset-autobuild)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(run)
(reset)
(figwheel-sidecar.repl-api/reset-autobuild)
(reset)
(run)
(reset)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(reset)
(run)
(figwheel-sidecar.repl-api/reset-autobuild)
(reset)
(figwheel-sidecar.repl-api/reset-autobuild)
(run)
