* Cosycat (Collaborative Synchronized Corpus Annotation Tool)

** Introduction

 Cosycat is a web-based corpus query and annotation interface with a focus on
 multiuser *synchronization* and *version control*. The application is designed 
 with an emphasis on *modularity* and *reusability*.

[a beautiful screenshot here]

*** What can I do with Cosycat?

    The major goal of Cosycat is to enable synchronized multiuser annotation of corpora.
    While Cosycat can absolutely be used for annotating typical NLP resources (such as
    Part-of-Speech tagging a newspaper corpus), it is mostly geared towards (preferrably
    team-based) Corpus Linguistic research aiming at statistically analyzing 
    particular constructions that have to be first retrieved and annotated.

    Cosycat allows multiple users to analize 

*** How does it work?

**** User interaction

**** Projects (access rights, pub/sub notifications)

**** VCS

**** Architecture

[[./doc/img/app-remote.jpg]]

** Installation

   Cosycat is written in [[https://github.com/clojure/clojure][Clojure]]/[[https://github.com/clojure/clojurescript][Clojurescript]] - a nested Lisp dialect implemented on top of Java/Javascript.
   From the outside, Cosycat is just a Java application, which means that in order to run it you will need 
   the Java Virtual Machine (JVM). 

*** Java
    
    Chances are high that you already have it. If not, you can either install
    the JRE (Java Runtime Environment) or the JDK (Java Development Kit). 
    
    In Ubuntu, depending on which package you want you can do the following (select either jre or jdk).

    #+BEGIN_SRC bash
    sudo apt-get install default-jre/default-jdk
    #+END_SRC

    For Mac you can use =homebrew= and do
    #+BEGIN_SRC bash
    brew cask install java
    #+END_SRC

    #+BEGIN_COMMENT
    Although the application should be able to run in different systems and with different JVM versions,
    development is done on a Ubuntu machine running the Oracle JVM 1.8.0-91. In any case, you probably
    don't want to have a JVM older than 1.6.
    #+END_COMMENT


**** Building from source
     If you want to build the jar file yourself, you will need the handy Clojure project manager
     [[http://leiningen.org/][Leiningen]] (see link for further installation instructions).
     Once you have installed leiningen you need to fetch the sourcecode from this repository:

     #+BEGIN_SRC bash
     git clone https://www.github.com/emanjavacas/cosycat.git
     #+END_SRC

     Go to the project root directory:
     #+BEGIN_SRC bash
     cd cosycat
     #+END_SRC

     and call the =uberjar= action:
     #+BEGIN_SRC bash
     lein uberjar
     #+END_SRC

     This last command will download all dependencies and build the executable jar into
     =cosycat/target/cosycat-VERSION-standalone.jar=, which you can use to run the app.


*** External dependencies
    Before you can run the app executable you need to make sure the following external dependencies
    are installed and running on your system.

**** MongoDb

     Perhaps the most important dependency is the MongoDB database. 
     The official online documentation has a nice section on [[https://docs.mongodb.com/manual/installation/#mongodb-community-edition][how to install MongoDB]] in different OSs.
     Once you have a working installation of MongoDB, make sure it is running before deploying Cosycat.
     Most conveniently, you can run the MongoDB process in the background as a daemon (see
     [[https://docs.mongodb.com/manual/tutorial/manage-mongodb-processes/#start-mongod-as-a-daemon][Start =mongod= as a Daemon]] for instructions). The =mongod= process will listen on specific
     TCP port, which defaults to 27017 but can be changed to any other value using the =--port= optional
     argument.
    
**** Corpus Query Engines

     In order to provide Cosycat with search capabilities you to point it to a server running
     an instance of a corpus query engine. Cosycat relies on HTTP to access corpus resources
     through a corpus query engine. Which means that your corpus query engine has to be deployable
     as a server application and has to know how to provide results on response to HTTP GET requests.
     In some cases - such as [[https://github.com/INL/BlackLab][BlackLab]] -, a server implementation is already provided (see [[http://inl.github.io/BlackLab/blacklab-server-overview.html][here]]).
     For the rest, it is normally easy to wrap a query engine in a HTTP server provided the engine
     can be interacted with from a powerful enough programming language.
     For instance, an example of a very simple server wrapper for the CQP engine can be found [[https://www.github.com/emanjavacas/simple-cwb-server][here]]
     (note, however, that it is still very alpha).
     
     As of Cosycat's current version, only the BlackLab server is supported.
     However adding support for other query engines is trivial and we will happily offer help
     or, perhaps, implement it ourselves if you let us know about the details (by, for instance,
     opening an issue to this repository).
     See [[sec:support][further down]] for documentation on how to implement support for a new query engine.

*** Configuration

    In order to run Cosycat you need to point it to the corpora you want to make available
    and to the the database connection (in case you are running MongoDB on a non-default port).
    Additionally, there are other optional variables that can be set or customize.
    All configuration should go into a file in [[https://en.wikipedia.org/wiki/Extensible_Data_Notation][edn format]] such as the following
    (documentation for each variable is shown in place as comments).
    
    #+BEGIN_SRC clojure
    {:dynamic-resource-path "app-resources/"            ;where to store dynamic resources (imgs, logs, etc...)
     :avatar-path "img/avatars/"                        ;where to store generated avatars
     :database-url "mongodb://127.0.0.1:27017/cosycat"  ;path to mongodb
     :pass "pass"                                       ;
     :port 3000                                         ;port to serve the website on
     :session-expires 900                               ;in minutes
     :corpora []}                                       ;see below
    #+END_SRC

**** Corpus configuration
    There are several formats for specifying corpora.
    
- Corpora full format
    #+BEGIN_SRC clojure
    [{:corpus "brown-tei"
      :type :blacklab-server
      :args {:server "mbgserver.uantwerpen.be:8080"
             :web-service "blacklab-server-1.4-SNAPSHOT"}}]
    #+END_SRC

- Corpora short format
    #+BEGIN_SRC clojure
    [{:corpus "brown-tei"
      :type :blacklab-server
      :args {:server "mbgserver.uantwerpen.be:8080"
             :web-service "blacklab-server-1.4-SNAPSHOT"}}]
    #+END_SRC

- Include only specific corpora from a given domain
    #+BEGIN_SRC clojure
    [{:corpus "brown-tei"
      :type :blacklab-server
      :args {:server "mbgserver.uantwerpen.be:8080"
             :web-service "blacklab-server-1.4-SNAPSHOT"}}]
    #+END_SRC

	     

*** Running the app

    Once you have resolved the dependencies and 
    #+BEGIN_SRC bash
    java -Dconfig="path/to/config.edn" -jar cleebo-VERSION.jar start 
    #+END_SRC

**** Tagsets

** Contributing

*** Adding support for a new Corpus Query Engine
    <<sec:support>>

*** TODOs (WIP)

**** Bulk inserts (does this work atomically in MongoDB?)
   Span annotations always touch multiple documents (from B to O). In that case, we should try
   ~$isolated~ to ensure atomic updates, see [[https://docs.mongodb.org/manual/core/write-operations-atomicity/][atomicity]] and [[https://docs.mongodb.org/manual/reference/operator/update/isolated/#up._S_isolated][$isolated operator]].

** License

Cosycat is released with a ... license.

